package org.syntax;

/**
 * Enum is a special "class" that represents a group of constants (unchangeable variables, like final variables).
 * This is an example of advanced enum, that contains list of all Keywords of Java programming language.
 * For simple example of enum, @see class {@link Enums}
 */
public enum JavaKeywordsEnum {

    ABSTRACT("A non-access modifier. Used for classes and methods: An abstract class cannot be used to create objects (to access it, it must be inherited from another class). An abstract method can only be used in an abstract class, and it does not have a body. The body is provided by the subclass (inherited from)"),
    ASSERT("For debugging"),
    BOOLEAN("A data type that can only store true and false values"),
    BREAK("Breaks out of a loop or a switch block"),                    /** @see {@link Loops} */
    BYTE("A data type that can store whole numbers from -128 and 127"), /** @see {@link Variables} */
    CASE("Marks a block of code in switch statements"),                 /** @see {@link Switch} */
    CATCH("Catches exceptions generated by try statements"),            /** @see {@link Exceptions} */
    CHAR("A data type that is used to store a single character"),       /** @see {@link Variables} */
    CLASS("Defines a class"),
    CONTINUE("Continues to the next iteration of a loop"),              /** @see {@link Loops} */
    CONST("Defines a constant. Not in use - use final instead"),
    DEFAULT("Specifies the default block of code in a switch statement"),         /** @see {@link Switch} */
    DO("Used together with while to create a do-while loop"),
    DOUBLE("A data type that can store whole numbers from 1.7e−308 to 1.7e+308"), /** @see {@link Loops} */
    ELSE("Used in conditional statements"),
    ENUM("Declares an enumerated (unchangeable) type"),
    EXPORTS("Exports a package with a module. New in Java 9"),
    EXTENDS("Extends a class (indicates that a class is inherited from another class)"), /** @see {@link org.inheritance.InheritanceExample} */
    FINAL("A non-access modifier used for classes, attributes and methods, which makes them non-changeable (impossible to inherit or override)"),
    FINALLY("Used with exceptions, a block of code that will be executed no matter if there is an exception or not"), /** @see {@link Exceptions} */
    FLOAT("A data type that can store whole numbers from 3.4e−038 to 3.4e+038"),         /** @see {@link Variables} */
    FOR("Create a for loop"),                 /** @see {@link Loops} */
    GOTO("Not in use, and has no function"),
    IF("Makes a conditional statement"),
    IMPLEMENTS("Implements an interface"),    /** @see {@link org.abstraction.AbstractionExample} */
    IMPORT("Used to import a package, class or interface"),
    INSTANCEOF("Checks whether an object is an instance of a specific class or an interface"),
    INT("A data type that can store whole numbers from -2147483648 to 2147483647"),                    /** @see {@link Variables} */
    INTERFACE("Used to declare a special type of class that only contains abstract methods"),          /** @see {@link org.abstraction.InterfaceExample} */
    LONG("A data type that can store whole numbers from -9223372036854775808 to 9223372036854775808"), /** @see {@link Variables} */
    MODULE("Declares a module. New in Java 9"),
    NATIVE("Specifies that a method is not implemented in the same Java source file (but in another language)"),
    NEW("Creates new objects"),
    PACKAGE("Declares a package"),    /** @see {@link org.packages.PackagesExample1} */
    PRIVATE("An access modifier used for attributes, methods and constructors, making them only accessible within the declared class"), /** @see {@link org.packages.packageC.AccessModifiersClass} */
    PROTECTED("An access modifier used for attributes, methods and constructors, making them accessible in the same package and subclasses"), /** @see {@link org.packages.packageC.AccessModifiersClass} */
    PUBLIC("An access modifier used for classes, attributes, methods and constructors, making them accessible by any other class"), /** @see {@link org.packages.packageC.AccessModifiersClass} */
    REQUIRES("Specifies required libraries inside a module. New in Java 9"),
    RETURN("Finished the execution of a method, and can be used to return a value from a method"), /** @see {@link org.abstraction.MethodExamples} */
    SHORT("A data type that can store whole numbers from -32768 to 32767"),                        /** @see {@link Variables} */
    STATIC("A non-access modifier used for methods and attributes. Static methods/attributes can be accessed without creating an object of a class"), /** @see {@link org.abstraction.StaticClassExample} */
    STRICTFP("Restrict the precision and rounding of floating point calculations"),
    SUPER("Refers to superclass (parent) objects"),                 /** @see {@link org.inheritance.InheritanceExample} and {@link org.inheritance.Car} */
    SWITCH("Selects one of many code blocks to be executed"),       /** @see {@link Switch} */
    SYNCHRONIZED("A non-access modifier, which specifies that methods can only be accessed by one thread at a time"),
    THIS("Refers to the current object in a method or constructor"),
    THROW("Creates a custom error"),                                /** @see {@link Exceptions} */
    THROWS("Indicates what exceptions may be thrown by a method"),  /** @see {@link Exceptions} */
    TRANSIENT("A non-accesss modifier, which specifies that an attribute is not part of an object's persistent state"),
    TRY("Creates a try...catch statement"),                         /** @see {@link Exceptions} */
    VAR("Declares a variable. New in Java 10"),
    VOID("Specifies that a method should not have a return value"), /** @see {@link org.abstraction.MethodExamples} */
    VOLATILE("Indicates that an attribute is not cached thread-locally, and is always read from the \"main memory\""),
    WHILE("Creates a while loop");                                  /** @see {@link Loops} */

    public final String description;

    JavaKeywordsEnum(String description) {
        this.description = description;
    }

    public static void main(String... args) {
        for (JavaKeywordsEnum oneKeyword : JavaKeywordsEnum.values()) {   //process all values of enums
            System.out.println(oneKeyword.name() + " - " + oneKeyword.description);
        }
    }
}
