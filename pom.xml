<?xml version="1.0" encoding="UTF-8"?>
<!--
pom.xml is configuration file for maven (build management tool) with list of all dependencies and their versions.
In maven, you can set up which repositories (dependencies) will be downloaded for project.
Can be integrated with Continuous Integration tools (Jenkins, Teamcity, etc.)
Allows to run tests - all methods with suffix "Test"
Allows to run tests trough testng.xml file with Maven Surefire plugin - plugin allows to run testng.xml instead of all methods with suffix "Test".
Terminology:
  - Artefact - file (usually *.jar file) which is deployed from maven repository
  - GroupID - unique identification of project. Should be set up with java package naming conventions.

Maven commands:
mvn clean
mvn build                         - build project
mvn test                          - run all test methods
mvn test -Dtest=MobileTest        - runs only tests in MobileTest class
mvn test -PSmokeTests             - runs only tests configured in pom.xml in SmokeTests profile
mvn test -Dbrowser=chrome         - runs maven with parameter browser=chrome
mvn test -Dbrowser=chromeheadless - runs maven with parameter browser=chromeheadless (without UI - headless mode)
-->
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <groupId>org.company</groupId>
  <artifactId>JavaCourse</artifactId>
  <version>1.0</version>

  <name>JavaCourse</name>
  <!-- FIXME change it to the project's website -->
  <url>http://www.example.com</url>

  <!-- POM.xml is file for maven, in which you can configure which JAVA version will be used, or which plugins will
   be used in project-->

  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <maven.compiler.source>11</maven.compiler.source>
    <maven.compiler.target>11</maven.compiler.target>
  </properties>

  <dependencies>
    <!-- JUnit: framework for unit tests -->
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>4.11</version>
      <scope>test</scope>
    </dependency>

    <!-- Log4J: logging framework -->
    <dependency>
      <groupId>org.apache.logging.log4j</groupId>
      <artifactId>log4j-api</artifactId>
      <version>2.13.3</version>
    </dependency>
    <dependency>
      <groupId>org.apache.logging.log4j</groupId>
      <artifactId>log4j-core</artifactId>
      <version>2.13.3</version>
    </dependency>

    <!-- TestNG: framework for running automated tests -->
    <dependency>
      <groupId>org.testng</groupId>
      <artifactId>testng</artifactId>
      <version>7.3.0</version>
      <!--<scope>test</scope> This will limit scope of TestNG only to tests-->
    </dependency>

    <!-- ExtentReports: For TestNG listener HTML reports -->
    <dependency>
      <groupId>com.aventstack</groupId>
      <artifactId>extentreports</artifactId>
      <version>5.0.6</version>
    </dependency>

    <!-- Selenium: for running Selenium browser tests-->
    <dependency>
      <groupId>org.seleniumhq.selenium</groupId>
      <artifactId>selenium-java</artifactId>
      <version>3.141.59</version>
    </dependency>

    <!-- Selenium server: for running Selenium Grid (Selenium tests on multiple computers) -->
    <dependency>
      <groupId>org.seleniumhq.selenium</groupId>
      <artifactId>selenium-server</artifactId>
      <version>3.141.59</version>
    </dependency>

    <!-- Commons io: for working with files -->
    <dependency>
      <groupId>org.apache.directory.studio</groupId>
      <artifactId>org.apache.commons.io</artifactId>
      <version>2.4</version>
    </dependency>

    <!-- Rest Assured: for automatic API testing -->
    <dependency>
      <groupId>io.rest-assured</groupId>
      <artifactId>rest-assured</artifactId>
      <version>4.3.3</version>
      <scope>test</scope>
    </dependency>

    <!-- Cucumber: behaviour driven testing framework -->
    <dependency>
      <groupId>io.cucumber</groupId>
      <artifactId>cucumber-java</artifactId>
      <version>6.10.0</version>
    </dependency>
    <dependency>
      <groupId>io.cucumber</groupId>
      <artifactId>cucumber-testng</artifactId>
      <version>6.10.0</version>
    </dependency>
    <dependency>
      <groupId>io.cucumber</groupId>
      <artifactId>cucumber-junit</artifactId>
      <version>6.10.0</version>
    </dependency>
  </dependencies>

  <build>
    <pluginManagement><!-- lock down plugins versions to avoid using Maven defaults (may be moved to parent pom) -->
      <plugins>
        <plugin>
          <artifactId>maven-clean-plugin</artifactId>
          <version>3.1.0</version>
        </plugin>
        <plugin>
          <artifactId>maven-resources-plugin</artifactId>
          <version>3.0.2</version>
        </plugin>
        <plugin>
          <artifactId>maven-compiler-plugin</artifactId>
          <version>3.8.0</version>
        </plugin>
        <plugin>
          <artifactId>maven-surefire-plugin</artifactId>
          <version>2.22.2</version>
          <!-- Maven surefire plugin can run mvn test that will execute TestNg.xml file, instead of maven tests-->
          <!-- In this case, we want to run tests in testng.xml that takes about 10 seconds to be finished, instead of mvn tests-->
          <configuration>
            <suiteXmlFiles>
              <suiteXmlFile>testng.xml</suiteXmlFile>
            </suiteXmlFiles>
          </configuration>
        </plugin>
        <plugin>
          <artifactId>maven-jar-plugin</artifactId>
          <version>3.0.2</version>
        </plugin>
        <plugin>
          <artifactId>maven-install-plugin</artifactId>
          <version>2.5.2</version>
        </plugin>
        <plugin>
          <artifactId>maven-deploy-plugin</artifactId>
          <version>2.8.2</version>
        </plugin>
        <plugin>
          <artifactId>maven-site-plugin</artifactId>
          <version>3.7.1</version>
        </plugin>
        <plugin>
          <artifactId>maven-project-info-reports-plugin</artifactId>
          <version>3.0.0</version>
        </plugin>
      </plugins>
    </pluginManagement>
  </build>
</project>
